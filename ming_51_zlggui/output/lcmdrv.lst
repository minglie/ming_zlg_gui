C51 COMPILER V9.52.0.0   LCMDRV                                                            01/09/2021 23:47:20 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LCMDRV
OBJECT MODULE PLACED IN .\output\lcmdrv.obj
COMPILER INVOKED BY: D:\Program Files\keil\C51\BIN\C51.EXE src\lcmdrv.c LARGE INCDIR(.\head;.\src) PRINT(.\output\lcmdrv
                    -.lst) TABS(2) OBJECT(.\output\lcmdrv.obj)

line level    source

   1          /****************************************************************************
   2          * 文件名：LCMDRV.C
   3          * 功能：MG12864图形液晶模块驱动程序。使用LPC2131的GPIO口控制操作。
   4          *       用于ZLG/GUI用户图形界面。
   5          * 液晶模块与LPC2131的连接如下所示：
   6          * D0 (7)  --    P0.4
   7          * .   --    .
   8          * .   --    .
   9          * .   --    .
  10          * D7 (14) --    P0.11
  11          *
  12          *   CS1   --    P0.12
  13          * CS2   --    P0.13
  14          * 
  15          *   RST     --      P0.14
  16          * D/I   --    P0.15
  17          * R/W   --    GND
  18          * E   --    P0.16
  19          *
  20          *  R/W为0进行写操作，为1时进行读操作；
  21          *  D/I为1表示数据传送， 为0表示命令传送；
  22          *  E读写脉冲；
  23          *  CS1和CS2为左右半屏选择，高电平选中；
  24          *  RST为复位控制，低电平复位。
  25          *  
  26          *  作者：黄绍斌
  27          *  日期：2005/3/7
  28          ****************************************************************************/
  29          #include  "config.h"
  30          #define   LCM_BUS     P1                                             
  31          #define   LCM_DI    P3_0                                        
  32          #define     LCM_RW      P3_1                                         
  33          #define     LCM_E       P3_2                                         
  34          #define     LCM_CS1     P3_4                                           
  35          #define     LCM_CS2     P3_3                                        
  36          #define   LCM_RST     P3_5       
  37          //================================================================
  38          //  KS0108指令代码定义
  39          //================================================================
  40          //#define  Set_Disp_On  0x3F
  41          //#define  Set_Disp_Off   0x3E
  42          //#define  Set_Column   0x40
  43          //#define  Set_Page     0xB8
  44          //#define  Set_Start_Line 0xC0
  45          
  46          
  47          
  48          
  49          /* 定义显示缓冲区 */
  50          TCOLOR  gui_disp_buf[GUI_LCM_YMAX/8][GUI_LCM_XMAX];
  51          
  52          
  53          /* 定义总线起始的GPIO，即D0对应的GPIO值(P0.4) */
  54          #define  BUS_NO   4
C51 COMPILER V9.52.0.0   LCMDRV                                                            01/09/2021 23:47:20 PAGE 2   

  55          
  56          /* 输出总线数据宏定义 */
  57          #define  OutData(dat) LCM_BUS= dat
  58          
  59          
  60          /* 定义CS1控制 */
  61          #define  SCS1()   LCM_CS1=1
  62          #define  CCS1()   LCM_CS1=0
  63          
  64          /* 定义CS2控制 */
  65          #define  SCS2()   LCM_CS2=1
  66          #define  CCS2()   LCM_CS2=0
  67          
  68          /* 定义RST控制 */
  69          
  70          #define  SRST()   LCM_RST=1
  71          #define  CRST()   LCM_RST=0
  72          
  73          
  74          /* 定义DI控制 */
  75          #define  SDI()    LCM_DI=1
  76          #define  CDI()    LCM_DI=0
  77          
  78          
  79          /* 定义E控制 */
  80          
  81          #define  SE()   LCM_E=1
  82          #define  CE()   LCM_E=0
  83          
  84          /*定义RW控制*/
  85          #define  SRW()    LCM_RW=1;
  86          #define  CRW()    LCM_RW=0;
  87          /* 定义LCM操作的命令字 */
  88          #define LCM_DISPON      0x3F  /* 打开LCM显示                          */
  89          #define LCM_DISPOFF     0x3E  /* 关闭LCM显示                            */
  90          #define LCM_STARTROW    0xc0  /* 显示起始行0，可以用LCM_STARTROW+x设置起始行。(x<64)        */
  91          #define LCM_ADDRSTRX    0xb8  /* 页起始地址，可以用LCM_ADDRSTRX+x设置当前页(即X)。(x<8)   */
  92          #define LCM_ADDRSTRY    0x40  /* 列起始地址，可以用LCM_ADDRSTRY+x设置当前列(即Y)。(y<64)    */  
  93          
  94          
  95          /*********************************************************************************
  96          * 名称：DELAY5()
  97          * 功能：软件延时函数。用于LCM显示输出时序控制。
  98          * 入口参数：无
  99          * 出口参数：无
 100          **********************************************************************************/
 101          void DELAY5(void)
 102          { int i;
 103   1      
 104   1        for(i=0; i<10; i++);
 105   1      }
 106          
 107          
 108          /***********************************************************************
 109          * 名称：LCM_WrCommand()
 110          * 功能：写命令子程序
 111          * 入口参数：command   要写入LCM的命令字
 112          * 注：数据口为P0口(作IO口)
 113          ***********************************************************************/
 114          void LCM_WrCommand(uint8 command) 
 115          { 
 116   1        CE();       // 先将E置为低          
C51 COMPILER V9.52.0.0   LCMDRV                                                            01/09/2021 23:47:20 PAGE 3   

 117   1          CDI();      // DI=0，表示发送命令
 118   1        CRW();        
 119   1                
 120   1          OutData(command);           
 121   1        //  DELAY5();     
 122   1          SE();
 123   1        //  DELAY5();     
 124   1          CE();
 125   1        //  DELAY5();
 126   1         
 127   1      }
 128          
 129          
 130          /***********************************************************************
 131          * 名称：LCM_WrData()
 132          * 功能：写数据子程序
 133          * 入口参数：wrdata    要写入LCM的数据
 134          ***********************************************************************/
 135          void LCM_WrData(uint8 wrdata) 
 136          { 
 137   1        CE();     // 先将E置为低  
 138   1          SDI();    // DI=1，表示发送数据 
 139   1          CRW();     
 140   1          OutData(wrdata);       
 141   1          //DELAY5();     
 142   1          SE();
 143   1          //DELAY5();     
 144   1          CE();     
 145   1          //DELAY5(); 
 146   1             
 147   1      }
 148          
 149          
 150          /***********************************************************************
 151          * 名称：LCM_WriteByte()
 152          * 功能：向指定点写数据(一字节)。
 153          * 入口参数：x     x坐标值(0-127)
 154          *       y       y坐标值(0-63)
 155          *           wrdata  所要写的数据
 156          * 说明：会重新设置CS1/CS2，及其内部指针
 157          ***********************************************************************/
 158          void LCM_WriteByte(uint8 x, uint8 y, uint8 wrdata) 
 159          { 
 160   1        x = x&0x7f;       // 参数过滤
 161   1        y = y&0x3f;
 162   1        CCS1();
 163   1        CCS2();
 164   1        //更新显示缓冲区
 165   1        y = y>>3;
 166   1        gui_disp_buf[y][x] = wrdata;
 167   1         
 168   1        // 更新LCD显示
 169   1        if(x<64)          // 选择液晶控制芯片(即CS1--控制前64个点，CS2--控制后64个点)
 170   1        { SCS1();  
 171   2        }
 172   1        else
 173   1        { SCS2();
 174   2          x = x-64;
 175   2        }
 176   1        LCM_WrCommand(LCM_ADDRSTRY+x);  // 设置当前列地址，即x坐标
 177   1        LCM_WrCommand(LCM_ADDRSTRX+y);  // 设置当前页地址，即y坐标
 178   1      
C51 COMPILER V9.52.0.0   LCMDRV                                                            01/09/2021 23:47:20 PAGE 4   

 179   1        LCM_WrData(wrdata);
 180   1      }
 181          
 182          
 183          /***********************************************************************
 184          * 名称：LCM_ReadByte()
 185          * 功能：读取指定点上的数据。
 186          * 入口参数：x     x坐标值(0-127)
 187          *         y     y坐标值(0-63)
 188          * 出口参数：返回该点上的字节数据。
 189          ***********************************************************************/
 190          uint8  LCM_ReadByte(uint8 x, uint8 y)
 191          { x = x&0x7f;       // 参数过滤
 192   1        y = y&0x3f;
 193   1      
 194   1        y = y>>3;
 195   1        return(gui_disp_buf[y][x]);
 196   1      }
 197          
 198          
 199          
 200          /////////////////////////////////////////////////////////////////////////
 201          
 202          
 203          /***********************************************************************
 204          * 名称：LCM_DispFill()
 205          * 功能：向显示缓冲区填充数据
 206          * 入口参数：filldata    要写入LCM的填充数据
 207          * 注：此函数会设置显示起始行为0，且会自动选中CS1有效
 208          ***********************************************************************/
 209          void LCM_DispFill(uint8 filldata)
 210          { uint8  x,y;
 211   1      
 212   1        SCS1();     // 选中两个控制芯片 
 213   1        CCS2();
 214   1        
 215   1        LCM_WrCommand(LCM_STARTROW);    // 设置显示起始行为0
 216   1      
 217   1        for(x=0; x<8; x++)
 218   1        { LCM_WrCommand(LCM_ADDRSTRX+x);  // 设置页地址，即X
 219   2          LCM_WrCommand(LCM_ADDRSTRY);  // 设置列地址，即Y
 220   2          for(y=0; y<64; y++)
 221   2          { LCM_WrData(filldata);
 222   3        } 
 223   2        }
 224   1      
 225   1        SCS2();
 226   1        CCS1();
 227   1        LCM_WrCommand(LCM_STARTROW);    // 设置显示起始行为0
 228   1      
 229   1        for(x=0; x<8; x++)
 230   1        { LCM_WrCommand(LCM_ADDRSTRX+x);  // 设置页地址，即X
 231   2          LCM_WrCommand(LCM_ADDRSTRY);  // 设置列地址，即Y
 232   2          for(y=0; y<64; y++)
 233   2          { LCM_WrData(filldata);
 234   3        } 
 235   2        }
 236   1      }
 237          
 238              
 239          /***********************************************************************
 240          * 名称：LCM_DispIni()
C51 COMPILER V9.52.0.0   LCMDRV                                                            01/09/2021 23:47:20 PAGE 5   

 241          * 功能：LCM显示初始化
 242          * 入口参数：无
 243          * 出口参数：无
 244          * 注：初化显示后，清屏并设置显示起始行为0
 245          *     会复位LCM_DISPCX，LCM_DISPCY.(并会只选中CS1)
 246          ***********************************************************************/
 247          void LCM_DispIni(void)
 248          { uint32  i;
 249   1      
 250   1          // 设置引脚连接模块
 251   1      
 252   1        // 复位LCM
 253   1      //  CRST();       
 254   1      //  for(i=0; i<5000; i++);
 255   1      //  SRST();   
 256   1      //  for(i=0; i<5000; i++); 
 257   1      
 258   1       // SCS1();         // 选中两个控制芯片 
 259   1        //SCS2();  
 260   1      
 261   1        LCM_WrCommand(LCM_DISPOFF); // 打开显示 
 262   1        LCM_WrCommand(LCM_STARTROW);  // 设置显示起始行为0
 263   1              
 264   1        LCM_WrCommand(LCM_ADDRSTRX);  // 设置页地址，即X  
 265   1        LCM_WrCommand(LCM_ADDRSTRY);  // 设置列地址，即Y
 266   1        LCM_WrCommand(LCM_DISPON);  // 打开显示   
 267   1      }
*** WARNING C280 IN LINE 248 OF src\lcmdrv.c: 'i': unreferenced local variable
 268          
 269          
 270          
 271          /////////////////////////////////////////////////////////////////////////////
 272          
 273          
 274          /****************************************************************************
 275          * 名称：GUI_FillSCR()
 276          * 功能：全屏填充。直接使用数据填充显示缓冲区。
 277          * 入口参数：dat   填充的数据
 278          * 出口参数：无
 279          * 说明：用户根据LCM的实际情况编写此函数。
 280          ****************************************************************************/
 281          void  GUI_FillSCR(TCOLOR dat)
 282          {  uint32 i,j;
 283   1        
 284   1         // 填充缓冲区
 285   1         for(i=0; i<(GUI_LCM_YMAX/8); i++)
 286   1         {  for(j=0; j<GUI_LCM_XMAX; j++)
 287   2            {  gui_disp_buf[i][j] = dat;
 288   3            }
 289   2         }
 290   1         
 291   1         // 填充LCM
 292   1         LCM_DispFill(dat);
 293   1      }
 294          
 295          
 296          /****************************************************************************
 297          * 名称：GUI_Initialize()
 298          * 功能：初始化GUI，包括初始化显示缓冲区，初始化LCM并清屏。
 299          * 入口参数：无
 300          * 出口参数：无
 301          * 说明：用户根据LCM的实际情况编写此函数。
C51 COMPILER V9.52.0.0   LCMDRV                                                            01/09/2021 23:47:20 PAGE 6   

 302          ****************************************************************************/
 303          void  GUI_Initialize(void)
 304          {  LCM_DispIni();         // 初始化LCM模块工作模式，纯图形模式
 305   1         GUI_FillSCR(0x00);       // 初始化缓冲区为0x00，并输出屏幕(清屏)
 306   1      }
 307          
 308          
 309          uint8 const  DEC_HEX_TAB[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
 310          /****************************************************************************
 311          * 名称：GUI_Point()
 312          * 功能：在指定位置上画点。
 313          * 入口参数：x   指定点所在列的位置
 314          *           y   指定点所在行的位置
 315          *           color 显示颜色(对于黑白色LCM，为0时灭，为1时显示)
 316          * 出口参数：返回值为1时表示操作成功，为0时表示操作失败。
 317          * 说明：操作失败原因是指定地址超出缓冲区范围。
 318          ****************************************************************************/
 319          uint8  GUI_Point(uint8 x, uint8 y, TCOLOR color)
 320          {  uint8   bak;
 321   1         
 322   1         // 参数过滤 
 323   1         if(x>=GUI_LCM_XMAX) return(0);
 324   1         if(y>=GUI_LCM_YMAX) return(0);
 325   1         
 326   1         // 设置相应的点为1或0 
 327   1         bak = LCM_ReadByte(x,y);
 328   1         if(0==color)
 329   1         {  bak &= (~DEC_HEX_TAB[y&0x07]); 
 330   2         }
 331   1         else
 332   1         {  bak |= DEC_HEX_TAB[y&0x07];
 333   2         }
 334   1        
 335   1         // 刷新显示 
 336   1         LCM_WriteByte(x, y, bak);
 337   1         return(1);
 338   1      }
 339          
 340          
 341          /****************************************************************************
 342          * 名称：GUI_ReadPoint()
 343          * 功能：读取指定点的颜色。
 344          * 入口参数：x   指定点所在列的位置
 345          *           y   指定点所在行的位置
 346          *           ret     保存颜色值的指针
 347          * 出口参数：返回0表示指定地址超出缓冲区范围
 348          * 说明：对于单色，设置ret的d0位为1或0，4级灰度则为d0、d1有效，8位RGB0--d则d7有效，
 349          *      RGB结构则R、G、B变量有效。
 350          ****************************************************************************/
 351          /*uint8  GUI_ReadPoint(uint8 x, uint8 y, TCOLOR *ret)
 352          {  uint8  bak;
 353          
 354             // 参数过滤
 355             if(x>=GUI_LCM_XMAX) return(0);
 356             if(y>=GUI_LCM_YMAX) return(0);
 357            
 358             bak = LCM_ReadByte(x,y);
 359             if( (bak & (DEC_HEX_TAB[y&0x07])) == 0 ) *ret = 0x00;
 360               else  *ret = 0x01;
 361             
 362             return(1);
 363          }
C51 COMPILER V9.52.0.0   LCMDRV                                                            01/09/2021 23:47:20 PAGE 7   

 364          
 365          
 366          /****************************************************************************
 367          * 名称：GUI_HLine()
 368          * 功能：画水平线。
 369          * 入口参数：x0    水平线起点所在列的位置
 370          *           y0    水平线起点所在行的位置
 371          *           x1      水平线终点所在列的位置
 372          *           color 显示颜色(对于黑白色LCM，为0时灭，为1时显示)
 373          * 出口参数：无
 374          * 说明：操作失败原因是指定地址超出缓冲区范围。
 375          ****************************************************************************/
 376          void  GUI_HLine(uint8 x0, uint8 y0, uint8 x1, TCOLOR color) 
 377          {  uint8  bak;
 378   1      
 379   1         if(x0>x1)            // 对x0、x1大小进行排列，以便画图
 380   1         {  bak = x1;
 381   2            x1 = x0;
 382   2            x0 = bak;
 383   2         }
 384   1         
 385   1         do
 386   1         {  GUI_Point(x0, y0, color);   // 逐点显示，描出垂直线
 387   2            x0++;
 388   2         }while(x1>=x0);
 389   1      }
 390          
 391          
 392          /***********************************************************************
 393          * 名称：GUI_RLine()
 394          * 功能：画竖直线。根据硬件特点，实现加速。
 395          * 入口参数：x0    垂直线起点所在列的位置
 396          *           y0    垂直线起点所在行的位置
 397          *           y1      垂直线终点所在行的位置
 398          *           color 显示颜色(对于黑白色LCM，为0时灭，为1时显示)
 399          * 出口参数：  无
 400          * 说明：操作失败原因是指定地址超出缓冲区范围。
 401          ***********************************************************************/
 402          void  GUI_RLine(uint8 x0, uint8 y0, uint8 y1, TCOLOR color) 
 403          {  uint8  bak;
 404   1         uint8  wr_dat;
 405   1        
 406   1         if(y0>y1)    // 对y0、y1大小进行排列，以便画图
 407   1         {  bak = y1;
 408   2            y1 = y0;
 409   2            y0 = bak;
 410   2         }
 411   1         
 412   1         do
 413   1         {  // 先读取当前点的字节数据
 414   2            bak = LCM_ReadByte(x0,y0);  
 415   2            
 416   2            // 进行'与'/'或'操作后，将正确的数据写回LCM
 417   2            // 若y0和y1不是同一字节，则y0--当前字节结束，即(y0+8)&0x38，全写1，或者0。
 418   2            // 若y0和y1是同一字节，则y0--y1，要全写1，或者0。
 419   2            // 方法：dat=0xff，然后按y0清零dat低位，按y1清零高位。
 420   2            if((y0>>3) != (y1>>3))    // 竖直线是否跨越两个字节(或以上)
 421   2            {  wr_dat = 0xFF << (y0&0x07);// 清0低位
 422   3            
 423   3               if(color)          
 424   3               {  wr_dat = bak | wr_dat;  // 若color不为0，则显示
 425   4               }
C51 COMPILER V9.52.0.0   LCMDRV                                                            01/09/2021 23:47:20 PAGE 8   

 426   3               else
 427   3               {  wr_dat = ~wr_dat;   // 若color为0，则清除显示
 428   4                  wr_dat = bak & wr_dat;
 429   4               }
 430   3               LCM_WriteByte(x0,y0, wr_dat);
 431   3               y0 = (y0+8)&0x38;
 432   3            }
 433   2            else
 434   2            {  wr_dat = 0xFF << (y0&0x07);
 435   3               wr_dat = wr_dat &  ( 0xFF >> (7-(y1&0x07)) );
 436   3                    
 437   3               if(color)          
 438   3               {  wr_dat = bak | wr_dat;  // 若color不为0，则显示
 439   4               }
 440   3               else
 441   3               {  wr_dat = ~wr_dat;   // 若color为0，则清除显示
 442   4                  wr_dat = bak & wr_dat;
 443   4               }
 444   3               LCM_WriteByte(x0,y0, wr_dat);
 445   3               return;
 446   3            } // end of if((y0>>3) != (y1>>3))... else...
 447   2         }while(y1>=y0);
 448   1      
 449   1      }  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    700    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   1032      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
